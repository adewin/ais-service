trigger:
  - master

pr:
  branches:
    include:
      - '*'

schedules:
  - cron: "0 0 * * *"
    displayName: nightly
    branches:
      include:
        - master
    always: true

variables:
  poolName: "UKHO Ubuntu 1804"

resources:
  containers:
    - container: jdk
      image: ukhydrographicoffice/jdk8-python36

stages:
  - stage: CI
    jobs:
      - job: build
        pool: $(poolName)
        container: jdk
        steps:
          - bash: ./gradlew clean assemble
            displayName: 'Run Gradle `assemble` task'

      - job: check
        pool: $(poolName)
        container: jdk
        steps:
          - bash: ./gradlew clean check aggregateReports --continue
            displayName: 'Run Gradle `check` task'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              TF_VAR_PASSWORD: $(TF_VAR_PASSWORD)

          - task: PublishBuildArtifacts@1
            condition: succeededOrFailed()
            inputs:
              pathtoPublish: './build/reports'
              artifactName: reports

          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: 'ukho-sonarcloud'
              organization: 'ukho'
              scannerMode: 'CLI'
              configMode: 'manual'
              cliProjectKey: 'UKHO_spark-ais-to-raster'
              cliProjectName: 'ais-to-raster'
              cliSources: '.'
              extraProperties: 'sonar.java.binaries=**/**'

          - task: SonarCloudAnalyze@1

      - job: test
        pool: $(poolName)
        container: jdk
        steps:
          - bash: ./gradlew clean test
            displayName: 'Run Gradle `test` task'

  - stage: CD
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'), ne(variables['Build.Reason'], 'Schedule'))
    jobs:
      - job: buildAndPushDocker
        pool: $(poolName)
        container: jdk
        steps:
          - bash: ./gradlew clean jib --info -Djib.console=plain
            displayName: 'Run Gradle `jib` task'
            env:
              DOCKER_REGISTRY_URL: $(DOCKER_REGISTRY_URL)
              DOCKER_REGISTRY_USERNAME: $(DOCKER_REGISTRY_USERNAME)
              DOCKER_REGISTRY_PASSWORD: $(DOCKER_REGISTRY_PASSWORD)
      - job: deploy
        pool: $(poolName)
        container: jdk
        steps:
          - bash: ./gradlew clean terraformApply --auto-approve
            displayName: 'Run Gradle  `terraformApply` task'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              TF_VAR_PASSWORD: $(TF_VAR_PASSWORD)
